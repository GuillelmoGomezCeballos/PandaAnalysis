#include "../interface/PandaAnalyzer.h"
#include "TVector2.h"
#include "TMath.h"
#include <algorithm>
#include <vector>
#include <unordered_set>


using namespace panda;
using namespace std;

// determine the partons associated with a fatjet
// Responsible: S. Narayanan
void PandaAnalyzer::FatjetPartons() 
{
  gt->fjNPartons = 0;
  if (fj1) {
    double threshold = 0.2 * fj1->rawPt;

    const FatJet *my_fj = fj1; 
    double dR2 = FATJETMATCHDR2; // put these guys in local scope

    auto matchJet = [my_fj, dR2](const GenParticle &p) -> bool {
      return DeltaR2(my_fj->eta(), my_fj->phi(), p.eta(), p.phi()) < dR2;
    };

    unordered_set<const panda::GenParticle*> partons; 
    for (auto* genptr : validGenP) {
      auto& gen = pToGRef(genptr);
      int apdgid = abs(gen.pdgid);
      if (apdgid > 5 && 
          apdgid != 21 &&
          apdgid != 15 &&
          apdgid != 11 && 
          apdgid != 13)
        continue; 

      if (gen.pt() < threshold)
        continue; 

      if (!matchJet(gen))
        continue;

      const GenParticle *parent = &gen;
      const GenParticle *foundParent = nullptr;
      while (parent->parent.isValid()) {
        parent = parent->parent.get();
        if (partons.find(parent) != partons.end()) {
          foundParent = parent;
          break;
        }
      }


      const GenParticle *dau1 = nullptr, *dau2 = nullptr;
      for (auto* childptr : validGenP) {
        auto& child = pToGRef(childptr);
        if (!(child.parent.isValid() && 
              child.parent.get() == &gen))
          continue; 
        
        int child_apdgid = abs(child.pdgid);
        if (child_apdgid > 5 && 
            child_apdgid != 21 &&
            child_apdgid != 15 &&
            child_apdgid != 11 && 
            child_apdgid != 13)
          continue; 

        if (dau1)
          dau2 = &child;
        else
          dau1 = &child;

        if (dau1 && dau2)
          break;
      }

      if (dau1 && dau2 && 
          dau1->pt() > threshold && dau2->pt() > threshold && 
          matchJet(*dau1) && matchJet(*dau2)) {
        if (foundParent) {
          partons.erase(partons.find(foundParent));
        }
        partons.insert(dau1);
        partons.insert(dau2);
      } else if (foundParent) {
        continue; 
      } else {
        partons.insert(&gen);
      }
    }

    gt->fjNPartons = partons.size();

    TLorentzVector vPartonSum;
    TLorentzVector vTmp;
    for (auto *p : partons) {
      vTmp.SetPtEtaPhiM(p->pt(), p->eta(), p->phi(), p->m());
      vPartonSum += vTmp;

      int digit3 = (p->pdgid%1000 - p->pdgid%100) / 100;
      int digit4 = (p->pdgid%10000 - p->pdgid%1000) / 1000;
      if (p->pdgid == 5 || digit3 == 5 || digit4 == 5)
        gt->fjNBPartons++;
      if (p->pdgid == 4 || digit3 == 4 || digit4 == 4)
        gt->fjNCPartons++;
    }
    gt->fjPartonM = vPartonSum.M();
    gt->fjPartonPt = vPartonSum.Pt();
    gt->fjPartonEta = vPartonSum.Eta();
  }

}

// fill an aux tree with reco info of the fatjet
// Responsible: S. Narayanan
void PandaAnalyzer::FillPFTree() 
{
  // this function saves the PF information of the leading fatjet
  // to a compact 2D array, that is eventually saved to an auxillary
  // tree/file. this is used as temporary input to the inference step
  // which then adds a separate tree to the main output. ideally,
  // this is integrated by use of e.g. lwtnn, but there is a bit of
  // development needed to support our networks. for the time being
  // we do it this way. -SMN
   

  // jet-wide quantities
  fjpt = -1; fjmsd = -1; fjeta = -1; fjphi = -1; fjphi = -1; fjrawpt = -1;
  for (int i = 0; i != NMAXPF; ++i) {
    for (int j = 0; j != NPFPROPS; ++j) {
      pfInfo[i][j] = 0;
    }
  }
  if (analysis->deepSVs) {
    for (int i = 0; i != NMAXSV; ++i) {
      for (int j = 0; j != NSVPROPS; ++j) {
        svInfo[i][j] = 0;
      }
    }}

  if (!fj1)
    return;

  fjpt = fj1->pt();
  fjmsd = fj1->mSD;
  fjeta = fj1->eta();
  fjphi = fj1->phi();
  fjrawpt = fj1->rawPt;

  gt->fjRho = TMath::Log(TMath::Power(fjmsd,2) / fjpt);
  gt->fjRawRho = TMath::Log(TMath::Power(fjmsd,2) / fjrawpt);
  gt->fjRho2 = TMath::Log(TMath::Power(fjmsd,2) / TMath::Power(fjpt,2));
  gt->fjRawRho2 = TMath::Log(TMath::Power(fjmsd,2) / TMath::Power(fjrawpt,2));

  // secondary vertices come first so we can link to tracks later
  std::map<const SecondaryVertex*, std::unordered_set<const PFCand*>> svTracks;
  std::map<const SecondaryVertex*, int> svIdx;
  if (analysis->deepSVs) {
    int idx = 0;
    for (auto &sv : event.secondaryVertices) {
      if (idx == NMAXSV)
        break;

      svInfo[idx][0] = sv.x;
      svInfo[idx][1] = sv.y;
      svInfo[idx][2] = sv.z;
      svInfo[idx][3] = sv.ntrk;
      svInfo[idx][4] = sv.ndof;
      svInfo[idx][5] = sv.chi2;
      svInfo[idx][6] = sv.significance;
      svInfo[idx][7] = sv.vtx3DVal;
      svInfo[idx][8] = sv.vtx3DeVal;
      svInfo[idx][9] = sv.pt();
      svInfo[idx][10] = sv.eta();
      svInfo[idx][11] = sv.phi();
      svInfo[idx][12] = sv.m();

      auto *svPtr = &sv;
      svIdx[svPtr] = idx;
      svTracks[svPtr] = {};
      for (auto pf : sv.daughters) {
        svTracks[svPtr].insert(pf.get());
      }
    }
  }


  std::vector<const PFCand*> sortedC;
  if (analysis->deepKtSort || analysis->deepAntiKtSort) {
    VPseudoJet particles = ConvertPFCands(fj1->constituents,analysis->puppiJets,0.001);
    fastjet::ClusterSequenceArea seq(particles,
                                     *(analysis->deepKtSort ? jetDefKt : jetDef),
                                     *areaDef);
    VPseudoJet allJets(seq.inclusive_jets(0.));
  
    auto &history = seq.history();
    auto &jets = seq.jets();
    vector<JetHistory> ordered_jets;
    for (auto &h : history) {
      if (h.jetp_index >= 0) {
        auto &j = jets.at(h.jetp_index);
        if (j.user_index() >= 0) {
          JetHistory jh;
          jh.user_idx = j.user_index();
          jh.child_idx = h.child;
          ordered_jets.push_back(jh);
        }
      }
    }
    sort(ordered_jets.begin(), ordered_jets.end(),
         [](JetHistory x, JetHistory y) { return x.child_idx < y.child_idx; });
    for (auto &jh : ordered_jets) {
      const PFCand *cand = fj1->constituents.at(jh.user_idx).get();
      sortedC.push_back(cand);
    }
  } else {
    for (auto ref : fj1->constituents)
      sortedC.push_back(ref.get());
    sort(sortedC.begin(), sortedC.end(),
         [](const PFCand *x, const PFCand *y) { return x->pt() > y->pt(); });
  }

  int idx = 0;
  for (auto *cand : sortedC) {
    if (idx == NMAXPF)
      break;
    pfInfo[idx][0] = cand->pt() * cand->puppiW() / fjrawpt;
    pfInfo[idx][1] = cand->eta() - fj1->eta();
    pfInfo[idx][2] = SignedDeltaPhi(cand->phi(), fj1->phi());
    pfInfo[idx][3] = cand->m();
    pfInfo[idx][4] = cand->e();
    pfInfo[idx][5] = cand->ptype;
    pfInfo[idx][6] = cand->puppiW();
    pfInfo[idx][7] = cand->puppiWNoLep(); 
    pfInfo[idx][8] = cand->hCalFrac;
    if (analysis->deepTracks) {
      if (cand->track.isValid())  {
        TVector3 pca = cand->pca();
        pfInfo[idx][9] = pca.Perp();
        pfInfo[idx][10] = pca.Z();
        pfInfo[idx][11] = cand->track->ptError();
        pfInfo[idx][12] = cand->track->dxy();
        pfInfo[idx][13] = cand->track->dz();
        pfInfo[idx][14] = cand->track->dPhi();
        pfInfo[idx][15] = cand->q();
        if (analysis->deepSVs) {
          for (auto &iter : svTracks) {
            if (iter.second.find(cand) != iter.second.end()) {
              TVector3 pos = iter.first->position();
              pfInfo[idx][16] = svIdx[iter.first] + 1; // offset from 0 value
              pfInfo[idx][17] = cand->dxy(pos);
              pfInfo[idx][18] = cand->dz(pos); 
              break;
            }
          }
        }
      }
    }
    idx++;
  }

  tr->TriggerEvent("pf tree");

}


// Create a new auxillary file for reco info
// Responsible: S. Narayanan
void PandaAnalyzer::IncrementAuxFile(bool close)
{
  if (fAux) {
    fAux->WriteTObject(tAux, "inputs", "Overwrite");
    fAux->Close();
  }
  if (close)
    return;

  TString path = TString::Format(auxFilePath.Data(),auxCounter++);
  fAux = TFile::Open(path.Data(), "RECREATE");
  if (DEBUG) PDebug("PandaAnalyzer::IncrementAuxFile", "Opening "+path);
  tAux = new TTree("inputs","inputs");
  
  pfInfo.resize(NMAXPF);
  for (int i = 0; i != NMAXPF; ++i) {
    pfInfo[i].resize(NPFPROPS);
  }
  tAux->Branch("kinematics",&pfInfo);
  
  svInfo.resize(NMAXSV);
  for (int i = 0; i != NMAXSV; ++i) {
    svInfo[i].resize(NSVPROPS);
  }
  tAux->Branch("svs",&svInfo);

  tAux->Branch("msd",&fjmsd,"msd/F");
  tAux->Branch("pt",&fjpt,"pt/F");
  tAux->Branch("rawpt",&fjrawpt,"rawpt/F");
  tAux->Branch("eta",&fjeta,"eta/F");
  tAux->Branch("phi",&fjphi,"phi/F");
  tAux->Branch("rho",&(gt->fjRho),"rho/f");
  tAux->Branch("rawrho",&(gt->fjRawRho),"rawrho/f");
  tAux->Branch("rho2",&(gt->fjRho2),"rho2/f");
  tAux->Branch("rawrho2",&(gt->fjRawRho2),"rawrho2/f");
  tAux->Branch("nPartons",&(gt->fjNPartons),"nPartons/I");
  tAux->Branch("nBPartons",&(gt->fjNBPartons),"nBPartons/I");
  tAux->Branch("nCPartons",&(gt->fjNCPartons),"nCPartons/I");
  tAux->Branch("partonM",&(gt->fjPartonM),"partonM/f");
  tAux->Branch("partonPt",&(gt->fjPartonPt),"partonPt/f");
  tAux->Branch("partonEta",&(gt->fjPartonEta),"partonEta/f");
  tAux->Branch("tau32",&(gt->fjTau32),"tau32/f");
  tAux->Branch("tau32SD",&(gt->fjTau32SD),"tau32SD/f");
  tAux->Branch("tau21",&(gt->fjTau21),"tau21/f");
  tAux->Branch("tau21SD",&(gt->fjTau21SD),"tau21SD/f");
  tAux->Branch("eventNumber",&(gt->eventNumber),"eventNumber/l");
  tAux->Branch("maxcsv",&(gt->fjMaxCSV),"maxcsv/f");
  tAux->Branch("mincsv",&(gt->fjMinCSV),"mincsv/f");
  tAux->Branch("doubleb",&(gt->fjDoubleCSV),"doubleb/f");

  gt->SetAuxTree(tAux);

  fOut->cd();

  if (tr)
    tr->TriggerEvent("increment aux file");
}